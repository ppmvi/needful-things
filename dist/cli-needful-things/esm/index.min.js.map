{"version":3,"file":"index.min.js","sources":["../../../src/cli/favicons/config.ts","../../../src/cli/favicons/index.ts","../../../src/cli/tinify/file.ts","../../../src/cli/tinify/index.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst filePath = path.resolve(process.cwd(), './.ppmvi.js');\nlet userConfig;\n\nif (fs.existsSync(filePath)) {\n  const file = require(filePath).default;\n  userConfig = file.favicons || {};\n}\n\nif (\n  userConfig &&\n  userConfig.master_picture &&\n  userConfig.master_picture.type === 'inline'\n) {\n  const image = path.resolve(process.cwd(), userConfig.master_picture.content);\n  if (fs.existsSync(image)) {\n    userConfig.master_picture.content = fs\n      .readFileSync(image)\n      .toString('base64');\n  }\n}\n\nconst defaultConfig = {\n  api_key: '',\n  master_picture: {\n    type: 'url',\n    url: '',\n  },\n  files_location: {\n    type: 'path',\n    path: '/static/icons',\n  },\n  favicon_design: {\n    desktop_browser: {},\n    ios: {\n      picture_aspect: 'background_and_margin',\n      margin: '8',\n      background_color: '#FFFFFF',\n      assets: {\n        ios6_and_prior_icons: false,\n        ios7_and_later_icons: false,\n        precomposed_icons: false,\n        declare_only_default_icon: true,\n      },\n    },\n    windows: {\n      picture_aspect: 'white_silhouette',\n      background_color: '#FFFFFF',\n      assets: {\n        windows_80_ie_10_tile: true,\n        windows_10_ie_11_edge_tiles: {\n          small: false,\n          medium: true,\n          big: false,\n          rectangle: false,\n        },\n      },\n    },\n    android_chrome: {\n      picture_aspect: 'background_and_margin',\n      margin: '12',\n      background_color: '#FFFFFF',\n      theme_color: '#FFFFFF',\n      manifest: {\n        name: 'My sample app',\n        display: 'standalone',\n        orientation: 'portrait',\n        start_url: '/',\n      },\n      assets: {\n        legacy_icon: false,\n        low_resolution_icons: false,\n      },\n    },\n    safari_pinned_tab: {\n      picture_aspect: 'black_and_white',\n      threshold: 60,\n      theme_color: '#FFFFFF',\n    },\n  },\n  settings: {\n    compression: '5',\n    scaling_algorithm: 'Mitchell',\n    error_on_image_too_small: true,\n    readme_file: false,\n    html_code_file: false,\n    use_path_as_is: true,\n  },\n};\n\nexport default { ...defaultConfig, ...userConfig };\n","import rfg from 'rfg-api';\nimport pify from 'pify';\nimport config from './config';\nimport ora from 'ora';\n\nexport default async function generate(path = './static/icons') {\n  const watcherSpinner = ora('Generating Favicons').start();\n  const generator = rfg.init();\n\n  try {\n    await pify(generator.generateFavicon)(config, path);\n    watcherSpinner.succeed();\n  } catch (err) {\n    watcherSpinner.fail(err.message);\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport png from 'png-metadata';\nimport { insert, dump, load, TagValues } from 'piexifjs';\n\nexport default class File {\n  static get EXIF_USER_COMMENT() {\n    return 'Compressed with TinyPNG by @ppmvi/needful-things';\n  }\n\n  static get PNG_TEXT_CHUNKG_FLAG() {\n    return 'tEXt';\n  }\n\n  readUserComment(filePath: string) {\n    let userComment = '';\n    const ext = path.extname(filePath);\n    const file = fs.readFileSync(filePath).toString('binary');\n\n    if (ext === '.png') {\n      const list = png.splitChunk(file);\n      const chunk = this.getUserCommentFromPngChunks(list);\n      userComment = chunk ? chunk.data : '';\n    } else {\n      const exifData = ext !== '.png' ? load(file)['Exif'] : undefined;\n      userComment =\n        typeof exifData !== 'undefined' &&\n        exifData[TagValues.ExifIFD.UserComment]\n          ? exifData[TagValues.ExifIFD.UserComment]\n          : '';\n    }\n\n    return userComment;\n  }\n\n  addUserComment(fileBuffer: string, filePath: string) {\n    const ext = path.extname(filePath);\n    let newData = fileBuffer;\n\n    if (ext === '.png') {\n      const list = png.splitChunk(fileBuffer);\n      if (!this.getUserCommentFromPngChunks(list)) {\n        const end = list.pop();\n        const newchunk = png.createChunk(\n          File.PNG_TEXT_CHUNKG_FLAG,\n          File.EXIF_USER_COMMENT\n        );\n        list.push(newchunk);\n        list.push(end);\n        newData = png.joinChunk(list);\n      }\n    } else {\n      const exifData = {\n        Exif: {\n          [TagValues.ExifIFD.UserComment]: File.EXIF_USER_COMMENT,\n        },\n      };\n      const exifBytes = dump(exifData);\n      newData = insert(exifBytes, fileBuffer);\n    }\n\n    return Buffer.from(newData, 'binary');\n  }\n\n  getUserCommentFromPngChunks(list: PngChunk[]) {\n    let chunk;\n    for (const item of list) {\n      if (item.type === File.PNG_TEXT_CHUNKG_FLAG) {\n        chunk = item;\n        break;\n      }\n    }\n    return chunk;\n  }\n}\n\ninterface PngChunk {\n  type: string;\n  data: string;\n}\n","import fs from 'fs';\nimport path from 'path';\nimport tinify from 'tinify';\nimport pify from 'pify';\nimport ora from 'ora';\nimport glob from 'glob';\nimport logSymbols from 'log-symbols';\nimport chalk from 'chalk';\nimport File from './file';\nimport { Separator, prompt, CheckboxChoiceOptions } from 'inquirer';\nimport { default as ISeparator } from 'inquirer/lib/objects/separator';\n\ninterface Options extends CheckboxChoiceOptions {\n  disabled: boolean | string;\n}\n\ninterface PpmviConfig {\n  favicons?: object;\n  tinify?: {\n    key?: string;\n  };\n}\n\nclass Tinify extends File {\n  private compressionsThisMonth: number | undefined;\n  private config: PpmviConfig = {};\n\n  constructor() {\n    super();\n    this.getConfig();\n  }\n\n  async run() {\n    try {\n      await this.setCompressionCount();\n\n      const choices = await this.getFiles();\n\n      const count = choices.filter(\n        (file) => !(file instanceof Separator) && !file.disabled\n      ).length;\n\n      if (count > 0) {\n        const { selectedFiles } = await prompt([\n          {\n            type: 'checkbox',\n            message: 'Select the files which should be compressed.',\n            name: 'selectedFiles',\n            pageSize: choices.length,\n            choices,\n            validate: (answer) => {\n              if (answer.length < 1) {\n                return 'You must at least choose one image.';\n              }\n\n              return true;\n            },\n          },\n        ]);\n\n        const { compress, addCompressFlag } = await prompt([\n          {\n            type: 'confirm',\n            message: `You are about to compress the selected images. Do you want to continue?`,\n            name: 'compress',\n            default: true,\n          },\n          {\n            type: 'confirm',\n            message: `Do you want to add a compressed flag to the file name? eg. test_compressed.png`,\n            name: 'addCompressFlag',\n            default: false,\n            when: ({ compress }) => compress,\n          },\n        ]);\n\n        if (compress) await this.doCompression(selectedFiles, addCompressFlag);\n      } else {\n        console.log(\n          logSymbols.info,\n          chalk.bold(`You already compressed all images.`)\n        );\n      }\n    } catch (err) {\n      console.log(err);\n      console.log(\n        logSymbols.error,\n        chalk.bold(`Looks like your key is not valid.`)\n      );\n    }\n  }\n\n  async doCompression(selectedFiles = [], addCompressFlag = false) {\n    for (const file of selectedFiles) {\n      const filePath = process.cwd() + file;\n      const dir = path.dirname(filePath);\n      const ext = path.extname(filePath);\n      const name = path.basename(filePath).replace(ext, '');\n      const compressFlag = addCompressFlag ? '_compressed' : '';\n      const fileBuffer = fs.readFileSync(filePath);\n      const spinner = ora(`Compressing ${name}${ext}`).start();\n      let result;\n\n      try {\n        result = await new Promise<Uint8Array>((resolve, reject) => {\n          tinify.fromBuffer(fileBuffer).toBuffer((err, result) => {\n            if (err) reject(err);\n            resolve(result);\n          });\n        });\n      } catch (err) {\n        spinner.fail(err.message);\n        break;\n      }\n\n      fs.writeFileSync(\n        `${dir}/${name}${compressFlag}${ext}`,\n        this.addUserComment(result.toString(), filePath)\n      );\n      spinner.succeed();\n    }\n  }\n\n  async getFiles(): Promise<Array<Options | ISeparator>> {\n    const files = (await pify(glob)(\n      process.cwd() + '/src/**/*.{png,jpg,jpeg}',\n      {}\n    )) as string[];\n    let curPath = '';\n\n    return files.reduce((result: Array<Options | ISeparator>, value, key) => {\n      const name = value.replace(process.cwd(), '');\n\n      if (!curPath) curPath = path.dirname(name);\n      else if (curPath && curPath !== path.dirname(name)) {\n        result.push(new Separator('----------'));\n        curPath = path.dirname(name);\n      }\n\n      result.push({\n        name,\n        checked: true,\n        disabled:\n          name.match(/compressed/) ||\n          this.readUserComment(value).includes(File.EXIF_USER_COMMENT)\n            ? 'Already compressed'\n            : false,\n      });\n      return result;\n    }, []);\n  }\n\n  async setCompressionCount() {\n    try {\n      await new Promise((resolve, reject) => {\n        tinify.validate((err) => {\n          if (err) reject(err);\n          resolve();\n        });\n      });\n      this.compressionsThisMonth = tinify.compressionCount;\n\n      if (typeof this.compressionsThisMonth === 'undefined') {\n        console.log(\n          logSymbols.info,\n          chalk.bold(\n            `Couldnt get the compressions count. You probably havent done any compressions.`\n          )\n        );\n      } else {\n        console.log(\n          logSymbols.info,\n          chalk.bold(\n            `You already used ${this.compressionsThisMonth}/500 free compressions this month.`\n          )\n        );\n      }\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  getConfig() {\n    const filePath = path.resolve(process.cwd(), './.ppmvi.js');\n    let config = {\n      tinify: { key: '' },\n    };\n    let userConfig = {};\n    if (fs.existsSync(filePath)) userConfig = require(filePath).default;\n\n    this.config = {\n      ...config,\n      ...userConfig,\n    };\n  }\n}\n\nexport default async function tinifyImages() {\n  const tinifyClass = new Tinify();\n  await tinifyClass.run();\n}\n"],"names":["userConfig","filePath","path","resolve","process","cwd","fs","existsSync","require","default","favicons","master_picture","type","image","content","readFileSync","toString","api_key","url","files_location","favicon_design","desktop_browser","ios","picture_aspect","margin","background_color","assets","ios6_and_prior_icons","ios7_and_later_icons","precomposed_icons","declare_only_default_icon","windows","windows_80_ie_10_tile","windows_10_ie_11_edge_tiles","small","medium","big","rectangle","android_chrome","theme_color","manifest","name","display","orientation","start_url","legacy_icon","low_resolution_icons","safari_pinned_tab","threshold","settings","compression","scaling_algorithm","error_on_image_too_small","readme_file","html_code_file","use_path_as_is","generate","watcherSpinner","ora","start","generator","rfg","init","pify","generateFavicon","config","_a","succeed","fail","err_1","message","Object","File","userComment","ext","extname","file","list","png","splitChunk","chunk","this","getUserCommentFromPngChunks","data","exifData","load","undefined","TagValues","ExifIFD","UserComment","fileBuffer","newData","end","pop","newchunk","createChunk","PNG_TEXT_CHUNKG_FLAG","EXIF_USER_COMMENT","push","joinChunk","Exif","exifBytes","dump","insert","Buffer","from","list_1","_i","item","_super","_this","getConfig","__extends","Tinify","setCompressionCount","_b","getFiles","choices","filter","Separator","disabled","length","prompt","pageSize","validate","answer","selectedFiles","when","compress","addCompressFlag","doCompression","console","log","logSymbols","info","chalk","bold","error","dir","dirname","name_1","basename","replace","compressFlag","spinner","result","Promise","reject","tinify","fromBuffer","toBuffer","err","err_2","writeFileSync","this_1","addUserComment","selectedFiles_1","glob","files","curPath","reduce","value","key","checked","match","readUserComment","includes","compressionsThisMonth","compressionCount","tinifyImages","run"],"mappings":"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"}